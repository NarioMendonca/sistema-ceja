// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password_hash String
  name          String
  role          Role
  cpf           String?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now()) @updatedAt
  Student       Student[]
  Teacher       Teacher[]
  Administrator Administrator[]

  @@map("users")
}

model Student {
  id             String    @id @default(uuid())
  enrollmentCode String    @unique
  dateOfBirth    DateTime?
  adress         String?
  user_id        String

  user        User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Enrollments Enrollments[]
  Grades      Grades[]

  @@map("students")
}

model Teacher {
  id             String @id @default(uuid())
  specialization String
  education      String
  user_id        String

  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  SubjectTeacher SubjectTeacher[]

  @@map("teachers")
}

model Administrator {
  id       String @id @default(uuid())
  position String
  user_id  String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("administrators")
}

model Class {
  id           String         @id @default(uuid())
  name         String
  ClassSubject ClassSubject[]
  Enrollments  Enrollments[]

  @@map("classes")
}

model Subject {
  id             String           @id @default(uuid())
  name           String
  description    String?
  ClassSubject   ClassSubject[]
  SubjectTeacher SubjectTeacher[]

  @@map("subjects")
}

model SubjectTeacher {
  id         String @id @default(uuid())
  subject_id String
  teacher_id String

  subject Subject @relation(fields: [subject_id], references: [id])
  teacher Teacher @relation(fields: [teacher_id], references: [id])
}

model ClassSubject {
  id         String @id @default(uuid())
  class_id   String
  subject_id String

  class   Class    @relation(fields: [class_id], references: [id])
  subject Subject  @relation(fields: [subject_id], references: [id])
  Grades  Grades[]

  @@map("class_subjects")
}

model Enrollments {
  id         String   @id @default(uuid())
  student_id String
  class_id   String
  created_at DateTime @default(now())

  student Student @relation(fields: [student_id], references: [id])
  class   Class   @relation(fields: [class_id], references: [id])

  @@map("enrollments")
}

model Grades {
  id               String @id @default(uuid())
  Grade            Float
  student_id       String
  class_subject_id String

  class_subject ClassSubject @relation(fields: [class_subject_id], references: [id])
  student       Student      @relation(fields: [student_id], references: [id])

  @@map("grades")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}
