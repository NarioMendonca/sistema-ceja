// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                       @id @default(uuid())
  email                 String                       @unique
  password_hash         String
  name                  String
  role                  Role
  cpf                   String?
  created_at            DateTime                     @default(now())
  updated_at            DateTime                     @default(now()) @updatedAt
  Student               Student[]
  Teacher               Teacher[]
  Administrator         Administrator[]
  Enrollments           Enrollments[]
  SubjectTeacher        TeacherSubjectAssingnments[]
  Grades                Grades[]
  StudentModuleProgress StudentModuleProgress[]

  @@map("users")
}

model Student {
  id             String    @id @default(uuid())
  enrollmentCode String    @unique
  dateOfBirth    DateTime?
  adress         String?
  user_id        String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("students")
}

model Teacher {
  id             String @id @default(uuid())
  specialization String
  education      String
  user_id        String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("teachers")
}

model Administrator {
  id       String @id @default(uuid())
  position String
  user_id  String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("administrators")
}

model Class {
  id           String          @id @default(uuid())
  name         String
  ClassSubject ClassSubjects[]
  Enrollments  Enrollments[]

  @@map("classes")
}

model Subject {
  id                        String                       @id @default(uuid())
  name                      String
  description               String?
  ClassSubject              ClassSubjects[]
  TeacherSubjectAssingnment TeacherSubjectAssingnments[]
  Modules                   Modules[]

  @@map("subjects")
}

model TeacherSubjectAssingnments {
  id         String @id @default(uuid())
  subject_id String
  user_id    String

  subject Subject @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("teacher_subject_assignments")
}

model ClassSubjects {
  id         String @id @default(uuid())
  class_id   String
  subject_id String

  class   Class   @relation(fields: [class_id], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  @@map("class_subjects")
}

model Enrollments {
  id         String   @id @default(uuid())
  class_id   String
  user_id    String
  created_at DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
  class Class @relation(fields: [class_id], references: [id], onDelete: Cascade)

  @@map("enrollments")
}

model Grades {
  id         String   @id @default(uuid())
  name       String
  Grade      Float
  user_id    String
  module_id  String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user   User    @relation(fields: [user_id], references: [id])
  module Modules @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@map("grades")
}

model Modules {
  id          String  @id @default(uuid())
  name        String
  description String?
  subject_id  String

  subject               Subject                 @relation(fields: [subject_id], references: [id], onDelete: NoAction)
  Grades                Grades[]
  StudentModuleProgress StudentModuleProgress[]

  @@map("modules")
}

model StudentModuleProgress {
  id           String    @id @default(uuid())
  user_id      String
  module_id    String
  status       String    @default("NÃ£o finalizado")
  grade        Float?
  completed_at DateTime?

  user   User    @relation(fields: [user_id], references: [id])
  module Modules @relation(fields: [module_id], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}
